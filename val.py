# from ultralytics import YOLOv10

# model = YOLOv10.from_pretrained('jameslahm/yolov10{n/s/m/b/l/x}')
# or
# wget https://github.com/THU-MIG/yolov10/releases/download/v1.1/yolov10{n/s/m/b/l/x}.pt
# model = YOLOv10('/home/jmw/ing/yolov10/yolov10n.pt')
# model = YOLO('/home/jmw/ing/yolov10/runs/detect/train73/weights/best.pt')

# model.val(data='coco.yaml', batch=256)

from ultralytics import YOLO

model = YOLO('yolov12{n/s/m/l/x}.pt')
model.val(data='coco.yaml', save_json=True)


#YOLOv10n summary (fused): 297 layers, 2764964 parameters, 0 gradients, 8.6 GFLOPs
# 1. 평균 정밀도 (Average Precision, AP) 분석

# AP는 모델이 예측한 경계 상자(bounding box)가 얼마나 정확한지를 나타내는 핵심 지표입니다. 예측이 얼마나 정확한지(Precision)와 실제 객체를 얼마나 잘 찾아내는지(Recall)를 종합적으로 고려합니다.

# AP @[ IoU=0.50:0.95 ] = 0.386

# 이것이 가장 대표적인 AP 값입니다.

# IoU (Intersection over Union, 예측과 실제 값의 겹치는 비율) 기준을 0.50부터 0.95까지 0.05 단위로 변화시키며 측정한 AP의 평균값입니다.

# **38.6%**는 준수한 성능이지만, 개선의 여지가 있는 수치입니다.

# AP @[ IoU=0.50 ] = 0.539

# IoU 기준을 **50%**로 낮추면(느슨한 기준) AP가 **53.9%**까지 상승합니다.

# 이는 모델이 객체의 대략적인 위치는 비교적 잘 찾아낸다는 것을 의미합니다.

# AP @[ IoU=0.75 ] = 0.419

# IoU 기준을 **75%**로 높이면(엄격한 기준) AP가 **41.9%**로 하락합니다.

# 이는 모델이 객체의 경계를 매우 정밀하게 예측하는 데에는 어려움이 있다는 것을 보여줍니다.

# 객체 크기별 AP

# 소형 (small) = 0.185: 작은 객체 탐지 성능이 매우 낮습니다. 모델이 작은 객체를 정확하게 찾아내는 데 큰 어려움을 겪고 있습니다.

# 중형 (medium) = 0.429: 중간 크기 객체에 대해서는 전체 평균과 비슷한 무난한 성능을 보입니다.

# 대형 (large) = 0.550: 큰 객체에 대해서는 성능이 매우 우수합니다.

# 2. 평균 재현율 (Average Recall, AR) 분석

# AR은 이미지에 있는 실제 객체들 중에서 모델이 얼마나 많이 찾아냈는지를 나타내는 지표입니다. "놓친 객체"가 얼마나 적은지를 보여줍니다.

# AR @[ maxDets=100 ] = 0.621

# 이미지 당 최대 100개의 객체를 탐지하도록 했을 때, 전체 객체 중 **62.1%**를 찾아냈습니다.

# 이는 모델이 탐지 개수만 충분히 허용하면 대부분의 객체를 놓치지 않고 찾는다는 것을 의미합니다.

# 탐지 개수별 AR

# maxDets=1 (0.326): 가장 확신하는 예측 1개만 고려하면 재현율이 32.6%입니다.

# maxDets=10 (0.549): 예측 개수를 10개로 늘리면 재현율이 54.9%로 크게 향상됩니다.

# maxDets=100 (0.621): 100개까지 늘리면 재현율이 소폭 더 상승합니다.

# 객체 크기별 AR (maxDets=100 기준)

# 소형 (small) = 0.394: 작은 객체는 많이 놓치고 있습니다. (재현율 39.4%)

# 중형 (medium) = 0.679: 중간 크기 객체는 대부분 잘 찾아냅니다.

# 대형 (large) = 0.805: 큰 객체는 거의 놓치지 않고 매우 잘 찾아냅니다. (재현율 80.5%)

# 결론 및 요약

# 강점:

# 큰 객체에 대한 탐지 정확도와 재현율이 매우 높다.

# 객체의 대략적인 위치를 파악하는 능력(느슨한 IoU 기준)이 좋다.

# 탐지 개수를 늘리면 대부분의 객체를 찾아낼 수 있다 (높은 재현율).

# 약점:

# 작은 객체를 탐지하는 성능이 매우 취약하다 (정확도, 재현율 모두 낮음).

# 객체의 경계를 정밀하게 예측하는 능력이 부족하다 (엄격한 IoU 기준에서 성능 하락).

# 따라서 이 모델은 크고 명확한 객체를 탐지하는 데에는 효과적이지만, 이미지 속에 있는 작고 세밀한 객체를 모두 정확하게 찾아내야 하는 작업에는 적합하지 않을 수 있습니다. 모델 성능 개선을 위해서는 특히 작은 객체에 대한 탐지 능력을 향상시키는 방향으로 학습 데이터나 모델 구조를 개선하는 것이 필요해 보입니다.